{"version":3,"file":"Voice.js","sourceRoot":"","sources":["../src/Voice.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { AudioDevice } from './AudioDevice';\nimport { Call } from './Call';\nimport { CallInvite } from './CallInvite';\nimport { NativeEventEmitter, NativeModule, Platform } from './common';\nimport { Constants } from './constants';\nimport { InvalidArgumentError } from './error/InvalidArgumentError';\nimport type { TwilioError } from './error/TwilioError';\nimport { UnsupportedPlatformError } from './error/UnsupportedPlatformError';\nimport { constructTwilioError } from './error/utility';\nimport type { NativeAudioDeviceInfo } from './type/AudioDevice';\nimport type { NativeCallInfo } from './type/Call';\nimport type { NativeCallInviteInfo } from './type/CallInvite';\nimport type { CallKit } from './type/CallKit';\nimport type { CustomParameters, Uuid } from './type/common';\nimport type { NativeVoiceEvent, NativeVoiceEventType } from './type/Voice';\n\n/**\n * Defines strict typings for all events emitted by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:namespace) | Voice namespace}.\n *\n * @public\n */\nexport declare interface Voice {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.AudioDevicesUpdated,\n    audioDevices: AudioDevice[],\n    selectedDevice?: AudioDevice\n  ): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.CallInvite, callInvite: CallInvite): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Error, error: TwilioError): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Registered): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Unregistered): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event, ...args: any[]): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Audio devices updated event. Raised when the list of audio devices changes.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.AudioDevicesUpdated, () => {\n   *   // the list of available audio devices has changed and/or the selected\n   *   // audio device has been changed\n   * });\n   * ```\n   *\n   * @param audioDevicesUpdatedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:1)} */\n  on(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n\n  /**\n   * Call invite event. Raised when an incoming call invite is received.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n   *   // handle the incoming call invite\n   * });\n   * ```\n   *\n   * @param callInviteEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:2)} */\n  on(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n\n  /**\n   * Error event. Raised when the SDK encounters an error.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Error, (error: TwilioError.GenericError) => {\n   *   // handle a generic Voice SDK error\n   * });\n   * ```\n   *\n   * @param errorEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    errorEvent: Voice.Event.Error,\n    listener: Voice.Listener.Error\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:3)} */\n  on(errorEvent: Voice.Event.Error, listener: Voice.Listener.Error): this;\n\n  /**\n   * Registered event. Raised when the SDK is registered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Registered, () => {\n   *   // handle successful registration for incoming calls\n   * });\n   * ```\n   *\n   * @param registeredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:4)} */\n  on(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n\n  /**\n   * Unregistered event. Raised when the SDK is unregistered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Unregistered, () => {\n   *   // handle successful unregistration for incoming calls\n   * });\n   * ```\n   *\n   * @param unregisteredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:5)} */\n  on(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param voiceEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(voiceEvent: Voice.Event, listener: Voice.Listener.Generic): this;\n  /** {@inheritDoc (Voice:interface).(addListener:6)} */\n  on(voiceEvent: Voice.Event, listener: Voice.Listener.Generic): this;\n}\n\n/**\n * Main entry-point of the Voice SDK. Provides access to the entire feature-set\n * of the library.\n *\n * @example\n * Usage:\n * ```\n * const token = '...';\n *\n * const voice = new Voice();\n *\n * voice.on(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n *   callInvite.accept();\n * });\n *\n * voice.register(token);\n * ```\n *\n * @remarks\n *  - See also the {@link (Voice:namespace).Event} enum for events emitted by\n *    `Voice` objects.\n *  - See also the {@link (Voice:interface) | Voice interface} for events\n *    emitted by this class and associated types.\n *  - See also the {@link (Voice:namespace) | Voice namespace} for types and\n *    enumerations used by this class.\n *\n * @public\n */\nexport class Voice extends EventEmitter {\n  /**\n   * Handlers for native voice events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (Voice:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeVoiceEventType,\n    (voiceEvent: NativeVoiceEvent) => void\n  >;\n\n  /**\n   * Main entry-point of the Voice SDK. Provides access to the entire\n   * feature-set of the library.\n   */\n  constructor() {\n    super();\n\n    this._nativeEventHandler = {\n      /**\n       * Common\n       */\n      [Constants.VoiceEventError]: this._handleError,\n\n      /**\n       * Call Invite\n       */\n      [Constants.VoiceEventTypeValueIncomingCallInvite]: this._handleCallInvite,\n\n      /**\n       * Registration\n       */\n      [Constants.VoiceEventRegistered]: this._handleRegistered,\n      [Constants.VoiceEventUnregistered]: this._handleUnregistered,\n\n      /**\n       * Audio Devices\n       */\n      [Constants.VoiceEventAudioDevicesUpdated]:\n        this._handleAudioDevicesUpdated,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeVoice,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * Connect for devices on Android platforms.\n   */\n  private async _connect_android(\n    token: string,\n    params: CustomParameters,\n    notificationDisplayName: string | undefined\n  ) {\n    const connectResult = await NativeModule.voice_connect_android(\n      token,\n      params,\n      notificationDisplayName\n    )\n      .then((callInfo) => {\n        return { type: 'ok', callInfo } as const;\n      })\n      .catch((error) => {\n        const code = error.userInfo.code;\n        const message = error.userInfo.message;\n        return { type: 'err', message, code } as const;\n      });\n\n    if (connectResult.type === 'err') {\n      throw constructTwilioError(connectResult.message, connectResult.code);\n    }\n\n    return new Call(connectResult.callInfo);\n  }\n\n  /**\n   * Connect for devices on iOS platforms.\n   */\n  private async _connect_ios(\n    token: string,\n    params: CustomParameters,\n    contactHandle: string\n  ) {\n    const parsedContactHandle =\n      contactHandle === '' ? 'Default Contact' : contactHandle;\n    const callInfo = await NativeModule.voice_connect_ios(\n      token,\n      params,\n      parsedContactHandle\n    );\n    return new Call(callInfo);\n  }\n\n  /**\n   * Intermediary event handler for `Voice`-level events. Ensures that the type\n   * of the incoming event is expected and invokes the proper event listener.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleNativeEvent = (nativeVoiceEvent: NativeVoiceEvent) => {\n    const { type } = nativeVoiceEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown voice event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    handler(nativeVoiceEvent);\n  };\n\n  /**\n   * Call invite handler. Creates a {@link (CallInvite:class)} from the info\n   * raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInvite = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (\n      nativeVoiceEvent.type !== Constants.VoiceEventTypeValueIncomingCallInvite\n    ) {\n      throw new Error(\n        'Incorrect \"voice#callInvite\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(callInviteInfo, CallInvite.State.Pending);\n\n    this.emit(Voice.Event.CallInvite, callInvite);\n  };\n\n  /**\n   * Error event handler. Creates an error from the namespace\n   * {@link TwilioErrors} from the info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleError = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventError) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      error: { code, message },\n    } = nativeVoiceEvent;\n    const error = constructTwilioError(message, code);\n    this.emit(Voice.Event.Error, error);\n  };\n\n  /**\n   * Registered event handler. Emits a\n   * {@link (Voice:namespace).Event.Registered} event.\n   */\n  private _handleRegistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventRegistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Registered);\n  };\n\n  /**\n   * Unregistered event handler. Emits a\n   * {@link (Voice:namespace).Event.Unregistered} event.\n   */\n  private _handleUnregistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventUnregistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Unregistered);\n  };\n\n  /**\n   * Audio devices updated event handler. Generates a new list of\n   * {@link (AudioDevice:class) | AudioDevice objects} and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleAudioDevicesUpdated = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventAudioDevicesUpdated) {\n      throw new Error(\n        'Incorrect \"voice#audioDevicesUpdated\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = nativeVoiceEvent;\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice =\n      typeof selectedDeviceInfo !== 'undefined' && selectedDeviceInfo !== null\n        ? new AudioDevice(selectedDeviceInfo)\n        : undefined;\n\n    this.emit(Voice.Event.AudioDevicesUpdated, audioDevices, selectedDevice);\n  };\n\n  /**\n   * Create an outgoing call.\n   *\n   * @remarks\n   * Note that the resolution of the returned `Promise` does not imply any call\n   * event occurring, such as answered or rejected.\n   * The `contactHandle` parameter is only required for iOS apps. Currently the\n   * parameter does have any effect on Android apps and can be ignored.\n   * `Default Contact` will appear in the iOS call history if the value is empty\n   * or not provided.\n   *\n   * @param token - A Twilio Access Token, usually minted by an\n   * authentication-gated endpoint using a Twilio helper library.\n   * @param options - Connect options.\n   *  See {@link (Voice:namespace).ConnectOptions}.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a call when the call is created.\n   *  - Rejects:\n   *    * When a call is not able to be created on the native layer.\n   *    * With an {@link TwilioErrors.InvalidArgumentError} when invalid\n   *      arguments are passed.\n   */\n  async connect(\n    token: string,\n    {\n      contactHandle = 'Default Contact',\n      notificationDisplayName = undefined,\n      params = {},\n    }: Voice.ConnectOptions = {}\n  ): Promise<Call> {\n    if (typeof token !== 'string') {\n      throw new InvalidArgumentError(\n        'Argument \"token\" must be of type \"string\".'\n      );\n    }\n\n    if (typeof contactHandle !== 'string') {\n      throw new InvalidArgumentError(\n        'Optional argument \"contactHandle\" must be undefined or of type' +\n          ' \"string\".'\n      );\n    }\n\n    if (typeof params !== 'object') {\n      throw new InvalidArgumentError(\n        'Optional argument \"params\" must be undefined or of type \"object\".'\n      );\n    }\n\n    for (const [key, value] of Object.entries(params)) {\n      if (typeof value !== 'string') {\n        throw new InvalidArgumentError(\n          `Voice.ConnectOptions.params[\"${key}\"] must be of type string`\n        );\n      }\n    }\n\n    switch (Platform.OS) {\n      case 'ios':\n        return this._connect_ios(token, params, contactHandle);\n      case 'android':\n        return this._connect_android(token, params, notificationDisplayName);\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". Expected \"android\" or \"ios\".`\n        );\n    }\n  }\n\n  /**\n   * Get the version of the native SDK. Note that this is not the version of the\n   * React Native SDK, this is the version of the mobile SDK that the RN SDK is\n   * utilizing.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a string representing the version of the native SDK.\n   */\n  getVersion(): Promise<string> {\n    return NativeModule.voice_getVersion();\n  }\n\n  /**\n   * Get the Device token from the native layer.\n   * @returns a Promise that resolves with a string representing the Device\n   * token.\n   */\n  getDeviceToken(): Promise<string> {\n    return NativeModule.voice_getDeviceToken();\n  }\n\n  /**\n   * Get a list of existing calls, ongoing and pending. This will not return any\n   * call that has finished.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (Call:class)}s.\n   */\n  async getCalls(): Promise<ReadonlyMap<Uuid, Call>> {\n    const callInfos = await NativeModule.voice_getCalls();\n    const callsMap = new Map<Uuid, Call>(\n      callInfos.map((callInfo: NativeCallInfo) => [\n        callInfo.uuid,\n        new Call(callInfo),\n      ])\n    );\n    return callsMap;\n  }\n\n  /**\n   * Get a list of pending call invites.\n   *\n   * @remarks\n   * This list will not contain any call invites that have been \"settled\"\n   * (answered or rejected).\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (CallInvite:class)}s.\n   */\n  async getCallInvites(): Promise<ReadonlyMap<Uuid, CallInvite>> {\n    const callInviteInfos = await NativeModule.voice_getCallInvites();\n    const callInvitesMap = new Map<Uuid, CallInvite>(\n      callInviteInfos.map((callInviteInfo: NativeCallInviteInfo) => [\n        callInviteInfo.uuid,\n        new CallInvite(callInviteInfo, CallInvite.State.Pending),\n      ])\n    );\n    return callInvitesMap;\n  }\n\n  /**\n   * Register this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @param fcmToken - Optional FCM token from expo-notifications for compatibility.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been registered.\n   */\n  register(token: string, fcmToken?: string): Promise<void> {\n    return NativeModule.voice_register(token, fcmToken);\n  }\n\n  /**\n   * Unregister this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @param fcmToken - Optional FCM token from expo-notifications for compatibility.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been unregistered.\n   */\n  unregister(token: string, fcmToken?: string): Promise<void> {\n    return NativeModule.voice_unregister(token, fcmToken);\n  }\n\n  /**\n   * Get audio device information from the native layer.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a list of the native device's audio devices and the\n   *    currently selected device.\n   */\n  async getAudioDevices(): Promise<{\n    audioDevices: AudioDevice[];\n    selectedDevice?: AudioDevice;\n  }> {\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = await NativeModule.voice_getAudioDevices();\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice =\n      typeof selectedDeviceInfo !== 'undefined'\n        ? new AudioDevice(selectedDeviceInfo)\n        : undefined;\n\n    return selectedDevice ? { audioDevices, selectedDevice } : { audioDevices };\n  }\n\n  /**\n   * Show the native AV route picker.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android. If this API is\n   * invoked on Android, there will be no operation and the returned `Promise`\n   * will immediately resolve with `null`.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the AV Route Picker View is shown.\n   */\n  showAvRoutePickerView(): Promise<void> {\n    return NativeModule.voice_showNativeAvRoutePicker();\n  }\n\n  /**\n   * Initialize a Push Registry instance inside the SDK for handling\n   * PushKit device token updates and receiving push notifications.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android.\n   * Use this method if the application does not have an iOS PushKit\n   * module and wishes to delegate the event handling to the SDK.\n   * Call this method upon launching the app to guarantee that incoming\n   * call push notifications will be surfaced to the users, especially when\n   * the app is not running in the foreground.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the initialization is done.\n   */\n  async initializePushRegistry(): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.voice_initializePushRegistry();\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n\n  /**\n   * Custom iOS CallKit configuration.\n   *\n   * @param configuration - iOS CallKit configuration options.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * See {@link CallKit} for more information.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the configuration has been applied.\n   *  - Rejects if the configuration is unable to be applied.\n   */\n  async setCallKitConfiguration(\n    configuration: CallKit.ConfigurationOptions\n  ): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.voice_setCallKitConfiguration(configuration);\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n\n  /**\n   * Set the native call contact handle template.\n   *\n   * This method is used to customize the displayed contact for Android\n   * notifications and the contact handle displayed in iOS CallKit UIs.\n   *\n   * @example\n   * ```ts\n   * await voice.setIncomingCallContactHandleTemplate('Foo ${DisplayName}');\n   * ```\n   * If an incoming call is made and there is a Twiml Parameter with key\n   * \"DisplayName\" and value \"Bar\", then the notification title or CallKit\n   * handle will display as \"Foo Bar\".\n   *\n   * @example\n   * ```ts\n   * await voice.setIncomingCallContactHandleTemplate();\n   * ```\n   * When invoking this method without any parameters, the template will be\n   * unset and the default notification and contact handle behavior is restored.\n   *\n   * @param template - The string to set the notification and contact handle\n   * template to. Note that this value is optional, if the method is invoked\n   * with an implicit undefined (no parameter) then the template will be unset\n   * and the default notification and contact handle behavior will be restored.\n   * Empty string values will be considered as the same as passing `undefined`.\n   *\n   * @returns\n   * A `Promise` that\n   * - Resolves with `undefined` if the template were set.\n   * - Rejects if the template was unable to be set.\n   */\n  async setIncomingCallContactHandleTemplate(template?: string): Promise<void> {\n    await NativeModule.voice_setIncomingCallContactHandleTemplate(template);\n  }\n\n  /**\n   * Returns a boolean representing whether or not Android Full Screen\n   * notifications are enabled.\n   *\n   * @remarks\n   * Unsupported platforms:\n   *   - iOS\n   *\n   * @returns\n   * A `Promise` that\n   * - Resolves `false` if either of the following is true:\n   *   - Full Screen Notifications are disabled in your app's configuration.\n   *     See `docs/disable-full-screen-notifications.md` for more info.\n   *   - The app was not granted Full Screen Notification permissions by the\n   *     operating system.\n   * - Resolves `true` if none of the above is true.\n   * - Rejects if the Android layer encountered an error.\n   */\n  async isFullScreenNotificationEnabled(): Promise<boolean> {\n    switch (Platform.OS) {\n      case 'ios': {\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on Android.`\n        );\n      }\n    }\n\n    return NativeModule.system_isFullScreenNotificationEnabled();\n  }\n\n  /**\n   * Opens the Android System Settings app to attempt to request Full Screen\n   * Notification permissions.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - iOS\n   *\n   * @returns\n   * A `Promise` that\n   * - Resolves `void` if the Android System Settings app was opened.\n   * - Rejects if the Android system encountered an error while trying to open\n   *   the System Settings app.\n   */\n  async requestFullScreenNotificationPermission(): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios': {\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on Android.`\n        );\n      }\n    }\n\n    return NativeModule.system_requestFullScreenNotificationPermission();\n  }\n}\n\n/**\n * Provides enumerations and types used by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:interface) | Voice interface}.\n *\n * @public\n */\nexport namespace Voice {\n  /**\n   * Options to pass to the {@link (Voice:class).connect} method.\n   */\n  export type ConnectOptions = {\n    /**\n     * Custom parameters to send to the TwiML Application.\n     */\n    params?: Record<string, string>;\n    /**\n     * A CallKit display name that will show in the call history as the contact\n     * handle.\n     *\n     * @remarks\n     * Unsupported platforms:\n     * - Android\n     */\n    contactHandle?: string;\n    /**\n     * The display name that will show in the Android notifications. Passing an\n     * empty string will be considered the same as if `undefined` were passed.\n     *\n     * @remarks\n     * Unsupported platforms:\n     * - iOS\n     */\n    notificationDisplayName?: string;\n  };\n\n  /**\n   * Enumeration of all event strings emitted by {@link (Voice:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Raised when there is a change in available audio devices.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:1)\n     * | Voice.addListener(AudioDevicesUpdated)}.\n     */\n    'AudioDevicesUpdated' = 'audioDevicesUpdated',\n\n    /**\n     * Raised when there is an incoming call invite.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:2)\n     * | Voice.addListener(CallInvite)}.\n     */\n    'CallInvite' = 'callInvite',\n\n    /**\n     * Raised when the SDK encounters an error.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:3)\n     * | Voice.addListener(Error)}.\n     */\n    'Error' = 'error',\n\n    /**\n     * Raised when the SDK is registered for incoming calls.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:4)\n     * | Voice.addListener(Registered)}.\n     */\n    'Registered' = 'registered',\n\n    /**\n     * Raised when the SDK is unregistered for incoming calls.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:5)\n     * | Voice.addListener(Unregistered)}.\n     */\n    'Unregistered' = 'unregistered',\n  }\n\n  /**\n   * Listener types for all events emitted by a {@link (Voice:class)\n   * | Voice object.}\n   */\n  export namespace Listener {\n    /**\n     * Audio devices updated event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.AudioDevicesUpdated} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:1)}.\n     */\n    export type AudioDevicesUpdated = (\n      audioDevices: AudioDevice[],\n      selectedDevice?: AudioDevice\n    ) => void;\n\n    /**\n     * Call invite event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.CallInvite} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:2)}.\n     */\n    export type CallInvite = (callInvite: CallInvite) => void;\n\n    /**\n     * Error event listener. This should be the function signature of an event\n     * listener bound to the\n     * {@link (Voice:namespace).Event.Error} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:3)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Error = (error: TwilioError) => void;\n\n    /**\n     * Registered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Registered} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:4)}.\n     */\n    export type Registered = () => void;\n\n    /**\n     * Unregistered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Unregistered} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:5)}.\n     */\n    export type Unregistered = () => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any voice event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:6)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"]}
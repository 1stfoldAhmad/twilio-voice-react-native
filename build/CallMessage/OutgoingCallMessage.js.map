{"version":3,"file":"OutgoingCallMessage.js","sourceRoot":"","sources":["../../src/CallMessage/OutgoingCallMessage.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAQH,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AACxD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AA2G5D;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,OAAO,mBAAoB,SAAQ,mBAAmB;IAC1D;;;;;;;OAOG;IACK,mBAAmB,CAGzB;IACF,YAAY,EACV,OAAO,EACP,WAAW,EACX,WAAW,EACX,aAAa,GACS;QACtB,KAAK,CAAC;YACJ,OAAO;YACP,WAAW;YACX,WAAW;YACX,aAAa;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,GAAG;YACzB;;eAEG;YACH,CAAC,SAAS,CAAC,uBAAuB,CAAC,EAAE,IAAI,CAAC,mBAAmB;YAC7D,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,gBAAgB;SACxD,CAAC;QACF,kBAAkB,CAAC,WAAW,CAC5B,SAAS,CAAC,gBAAgB,EAC1B,IAAI,CAAC,kBAAkB,CACxB,CAAC;IACJ,CAAC;IAED;;;OAGG;IACK,kBAAkB,GAAG,CAC3B,sBAA8C,EAC9C,EAAE;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,sBAAsB,CAAC;QAExC,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CACb,mEAAmE,IAAI,GAAG,CAC3E,CAAC;QACJ,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,sBAAsB,CAAC,aAAa,EAAE,CAAC;YAC3D,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAClC,CAAC;IACH,CAAC,CAAC;IAEF;;;OAGG;IACK,mBAAmB,GAAG,CAC5B,sBAA8C,EAC9C,EAAE;QACF,IAAI,sBAAsB,CAAC,IAAI,KAAK,SAAS,CAAC,uBAAuB,EAAE,CAAC;YACtE,MAAM,IAAI,KAAK,CACb,iEAAiE;gBAC/D,IAAI,sBAAsB,CAAC,IAAI,EAAE,CACpC,CAAC;QACJ,CAAC;QAED,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,sBAAsB,CAAC,KAAK,CAAC;QACvD,MAAM,KAAK,GAAG,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC;IAEF;;;OAGG;IACK,gBAAgB,GAAG,CACzB,sBAA8C,EAC9C,EAAE;QACF,IAAI,sBAAsB,CAAC,IAAI,KAAK,SAAS,CAAC,oBAAoB,EAAE,CAAC;YACnE,MAAM,IAAI,KAAK,CACb,8DAA8D;gBAC5D,IAAI,sBAAsB,CAAC,IAAI,GAAG,CACrC,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC;CACH;AAED;;;;;;;;;GASG;AACH,WAAiB,mBAAmB;IAClC;;OAEG;IACH,IAAY,KAWX;IAXD,WAAY,KAAK;QACf;;;WAGG;QACH,4BAAqB,CAAA;QACrB;;;WAGG;QACH,sBAAe,CAAA;IACjB,CAAC,EAXW,KAAK,GAAL,yBAAK,KAAL,yBAAK,QAWhB;AAoCH,CAAC,EAnDgB,mBAAmB,KAAnB,mBAAmB,QAmDnC","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport type { TwilioError } from '../error';\nimport type {\n  NativeCallMessageEvent,\n  NativeCallMessageEventType,\n  NativeCallMessageInfo,\n} from '../type/CallMessage';\nimport { Constants } from '../constants';\nimport { NativeEventEmitter } from '../common';\nimport { constructTwilioError } from '../error/utility';\nimport { IncomingCallMessage } from './IncomingCallMessage';\n\n/**\n * Defines strict typings for all events emitted by\n * {@link (OutgoingCallMessage:class) | OutgoingCallMessage objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link CallMessage} interface.\n * - See also the {@link IncomingCallMessage} class.\n * - See also the {@link (OutgoingCallMessage:namespace)} namespace.\n *\n * @public\n */\nexport declare interface OutgoingCallMessage {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    error: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(sentEvent: OutgoingCallMessage.Event.Sent): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Failure event. Raised when outgoingCallMessage fails to be sent out.\n   *\n   * @example\n   * ```typescript\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *    // outgoingCallMessage failed, handle error\n   * });\n   * ```\n   *\n   * @param failureEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object.\n   */\n  addListener(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    listener: OutgoingCallMessage.Listener.Failure\n  ): this;\n  /** {@inheritDoc (OutgoingCallMessage:interface).(addListener:1)} */\n  on(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    listener: OutgoingCallMessage.Listener.Failure\n  ): this;\n\n  /**\n   * Sent event. Raised when outgoingCallMessage is sent.\n   * @example\n   * ```typescript\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *    // outgoingCallMessage sent\n   * })\n   * ```\n   *\n   * @param sentEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    sentEvent: OutgoingCallMessage.Event.Sent,\n    listener: OutgoingCallMessage.Listener.Sent\n  ): this;\n  /** {@inheritDoc (OutgoingCallMessage:interface).(addListener:2)} */\n  on(\n    sentEvent: OutgoingCallMessage.Event.Sent,\n    listener: OutgoingCallMessage.Listener.Sent\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param outgoingCallMessageEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The outgoingCallMessage object.\n   */\n  addListener(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    listener: OutgoingCallMessage.Listener.Generic\n  ): this;\n  /**\n   * {@inheritDoc (OutgoingCallMessage:interface).(addListener:3)}\n   */\n  on(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    listener: OutgoingCallMessage.Listener.Generic\n  ): this;\n}\n\n/**\n * CallMessage API is in beta.\n *\n * Provides access to information about a outgoingCallMessage, including the call\n * message content, contentType, messageType, and voiceEventSid\n *\n * @remarks\n * Note that the outgoingCallMessage information is fetched as soon as possible from the\n * native layer, but there is no guarantee that all information is immediately\n * available. Methods such as `OutgoingCallMessage.getContent` or `OutgoingCallMessage.getSid`\n * may return `undefined`.\n *\n * As outgoingCallMessage events are received from the native layer, outgoingCallMessage information will\n * propagate from the native layer to the JS layer and become available.\n * Therefore, it is good practice to read information from the outgoingCallMessage after an\n * event occurs, or as events occur.\n *\n * - See the {@link (OutgoingCallMessage:namespace).Event} enum for events emitted by `OutgoingCallMessage`\n *   objects.\n * - See the {@link (OutgoingCallMessage:interface) | OutgoingCallMessage interface} for overloaded event listening\n *   metods.\n * - See the {@link (OutgoingCallMessage:namespace) | OutgoingCallMessage namespace} for types and enumerations\n *   used by this class.\n *\n * @public\n */\nexport class OutgoingCallMessage extends IncomingCallMessage {\n  /**\n   * Handlers for native OutgoingCallMessage events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (OutgoingCallMessage:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeCallMessageEventType,\n    (callEvent: NativeCallMessageEvent) => void\n  >;\n  constructor({\n    content,\n    contentType,\n    messageType,\n    voiceEventSid,\n  }: NativeCallMessageInfo) {\n    super({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    this._nativeEventHandler = {\n      /**\n       * Sending Call Message State\n       */\n      [Constants.CallEventMessageFailure]: this._handleFailureEvent,\n      [Constants.CallEventMessageSent]: this._handleSentEvent,\n    };\n    NativeEventEmitter.addListener(\n      Constants.ScopeCallMessage,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * This intermediate native callMessage event handler acts as a \"gate\".\n   * @param nativeCallMessageEvent - A callMessage event directly from the native layer.\n   */\n  private _handleNativeEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    const { type } = nativeCallMessageEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown callMessage event type received from the native layer: \"${type}\"`\n      );\n    }\n\n    if (this.getSid() === nativeCallMessageEvent.voiceEventSid) {\n      handler(nativeCallMessageEvent);\n    }\n  };\n\n  /**\n   * Handler for the {@link (OutgoingCallMessage:namespace).Event.Failure} event.\n   * @param nativeCallMessageEvent - The native callMessage event.\n   */\n  private _handleFailureEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    if (nativeCallMessageEvent.type !== Constants.CallEventMessageFailure) {\n      throw new Error(\n        'Incorrect \"outgoingCallMessage#Failure\" handler called for type' +\n          `\"${nativeCallMessageEvent.type}`\n      );\n    }\n\n    const { message, code } = nativeCallMessageEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(OutgoingCallMessage.Event.Failure, error);\n  };\n\n  /**\n   * Handler for the {@link (OutgoingCallMessage:namespace).Event.Sent} event.\n   * @param nativeCallMessageEvent - The native callMessage event.\n   */\n  private _handleSentEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    if (nativeCallMessageEvent.type !== Constants.CallEventMessageSent) {\n      throw new Error(\n        'Incorrect \"outgoingCallMessage#Sent\" handler called for type' +\n          `\"${nativeCallMessageEvent.type}\"`\n      );\n    }\n\n    this.emit(OutgoingCallMessage.Event.Sent);\n  };\n}\n\n/**\n * Namespace for enumerations and types used by\n * {@link (OutgoingCallMessage:class) | OutgoingCallMessage objects}.\n *\n * @remarks\n *  - See also the {@link (OutgoingCallMessage:class) | OutgoingCallMessage class}.\n *  - See also the {@link (OutgoingCallMessage:interface) | OutgoingCallMessage interface}.\n *\n * @public\n */\nexport namespace OutgoingCallMessage {\n  /**\n   * Enumeration of all event strings emitted by {@link (OutgoingCallMessage:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Raised when outgoingCallMessage fails.\n     * See {@link (OutgoingCallMessage:interface).(addListener:1)}.\n     */\n    'Failure' = 'failure',\n    /**\n     * Raised when outgoingCallMessage has been sent.\n     * See {@link (OutgoingCallMessage:interface).(addListener:2)}.\n     */\n    'Sent' = 'sent',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (OutgoingCallMessage:class) | OutgoingCallMessage: object}\n   */\n  export namespace Listener {\n    /**\n     * OutgoingCallMessage failure event listener. This should be the function signature of\n     * any event listener bound to the {@link (OutgoingCallMessage:namespace).Event.Failure} event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:1)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Failure = (error: TwilioError) => void;\n\n    /**\n     * OutgoingCallMessage sent event listner. This should be the function signature of\n     * any event listener bound to the {@link (OutgoingCallMessage:namespace).Event.Sent} event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:2)}.\n     */\n    export type Sent = () => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any OutgoingCallMessage event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:3)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"]}
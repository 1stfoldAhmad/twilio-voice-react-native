{"version":3,"file":"utility.js","sourceRoot":"","sources":["../../src/error/utility.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAE9D;;;;;;;;;GASG;AACH,MAAM,UAAU,oBAAoB,CAClC,OAAe,EACf,IAAY;IAEZ,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;QAChC,MAAM,IAAI,oBAAoB,CAC5B,iDAAiD,CAClD,CAAC;IACJ,CAAC;IAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QAC7B,MAAM,IAAI,oBAAoB,CAC5B,8CAA8C,CAC/C,CAAC;IACJ,CAAC;IAED,MAAM,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE1C,OAAO,OAAO,UAAU,KAAK,WAAW;QACtC,CAAC,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC;QACzB,CAAC,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import { errorsByCode } from './generated';\nimport { TwilioError } from './TwilioError';\nimport { InvalidArgumentError } from './InvalidArgumentError';\n\n/**\n * Uses the generated error-code map to create the appropriate error.\n * If the code is \"unexpected\" such that there is no constructor for that\n * specific code, this function will default to a generic {@link TwilioError}.\n *\n * @param message an error message\n * @param code a Twilio error code, for example `31209`\n *\n * @returns a {@link TwilioError} or appropriate sub-class\n */\nexport function constructTwilioError(\n  message: string,\n  code: number\n): TwilioError {\n  if (typeof message !== 'string') {\n    throw new InvalidArgumentError(\n      'The \"message\" argument is not of type \"string\".'\n    );\n  }\n\n  if (typeof code !== 'number') {\n    throw new InvalidArgumentError(\n      'The \"code\" argument is not of type \"number\".'\n    );\n  }\n\n  const ErrorClass = errorsByCode.get(code);\n\n  return typeof ErrorClass !== 'undefined'\n    ? new ErrorClass(message)\n    : new TwilioError(message, code);\n}\n"]}
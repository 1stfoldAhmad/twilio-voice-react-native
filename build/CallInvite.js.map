{"version":3,"file":"CallInvite.js","sourceRoot":"","sources":["../src/CallInvite.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { Call } from './Call';\nimport { NativeEventEmitter, NativeModule, Platform } from './common';\nimport { InvalidStateError } from './error/InvalidStateError';\nimport { TwilioError } from './error/TwilioError';\nimport { UnsupportedPlatformError } from './error/UnsupportedPlatformError';\nimport { constructTwilioError } from './error/utility';\nimport type {\n  NativeCallInviteInfo,\n  NativeCallInviteEvent,\n  NativeCallInviteAcceptedEvent,\n  NativeCallInviteCancelledEvent,\n  NativeCallInviteMessageReceivedEvent,\n} from './type/CallInvite';\nimport type { CustomParameters, Uuid } from './type/common';\nimport { CallMessage, validateCallMessage } from './CallMessage/CallMessage';\nimport { IncomingCallMessage } from './CallMessage/IncomingCallMessage';\nimport { OutgoingCallMessage } from './CallMessage/OutgoingCallMessage';\nimport { Constants } from './constants';\n\n/**\n * Defines strict typings for all events emitted by {@link (CallInvite:class)\n * | CallInvite objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (CallInvite:class) | CallInvite class}.\n * - See also the {@link (CallInvite:namespace) | CallInvite namespace}.\n *\n * @public\n */\nexport declare interface CallInvite {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(acceptedEvent: CallInvite.Event.Accepted, call: Call): boolean;\n\n  /** @internal */\n  emit(rejectedEvent: CallInvite.Event.Rejected): boolean;\n\n  /** @internal */\n  emit(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    error?: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(notificationTappedEvent: CallInvite.Event.NotificationTapped): boolean;\n\n  /** @internal */\n  emit(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    incomingCallMessage: IncomingCallMessage\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Accepted event. Raised when the call invite has been accepted.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Accepted, (call) => {\n   *     // the call invite was accepted through either the native layer\n   *     // or the js layer\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param acceptedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    acceptedEvent: CallInvite.Event.Accepted,\n    listener: CallInvite.Listener.Accepted\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:1)} */\n  on(\n    acceptedEvent: CallInvite.Event.Accepted,\n    listener: CallInvite.Listener.Accepted\n  ): this;\n\n  /**\n   * Rejected event. Raised when the call invite has been rejected.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Rejected, () => {\n   *     // the call invite was rejected through either the native layer\n   *     // or the js layer\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param rejectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    rejectedEvent: CallInvite.Event.Rejected,\n    listener: CallInvite.Listener.Rejected\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:2)} */\n  on(\n    rejectedEvent: CallInvite.Event.Rejected,\n    listener: CallInvite.Listener.Rejected\n  ): this;\n\n  /**\n   * Cancelled event. Raised when the call invite has been cancelled.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Cancelled, (error) => {\n   *     // the call invite was cancelled\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param cancelledEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    listener: CallInvite.Listener.Cancelled\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:3)} */\n  on(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    listener: CallInvite.Listener.Cancelled\n  ): this;\n\n  /**\n   * Notification tapped event. Raised when the call invite notification has\n   * been tapped.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.NotificationTapped, () => {\n   *     // the call invite notification was tapped\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   * This API is Android specific.\n   *\n   * @param notificationTappedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    notificationTappedEvent: CallInvite.Event.NotificationTapped,\n    listener: CallInvite.Listener.NotificationTapped\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:4)} */\n  on(\n    notificationTappedEvent: CallInvite.Event.NotificationTapped,\n    listener: CallInvite.Listener.NotificationTapped\n  ): this;\n\n  /**\n   * MessageReceived event. Raised when a {@link IncomingCallMessage} is\n   * received.\n   *\n   * @example\n   * ```typescript\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.addListener(CallInvite.Event.MessageReceived, (message) => {\n   *      // callMessage received\n   *   });\n   * });\n   * ```\n   *\n   * @param messageReceivedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:5)} */\n  on(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n}\n\n/**\n * Provides access to information about a call invite, including the call\n * parameters, and exposes functionality to accept or decline a call.\n *\n * @remarks\n *\n * Note that when a `CallInvite` is acted upon (i.e. when\n * {@link (CallInvite:class).accept} or {@link (CallInvite:class).reject} is\n * invoked), then the `CallInvite` is \"settled\".\n *\n * The state of the `CallInvite` is changed from\n * {@link (CallInvite:namespace).State.Pending} to\n * {@link (CallInvite:namespace).State.Accepted} or\n * {@link (CallInvite:namespace).State.Rejected} and the `CallInvite` can no\n * longer be acted upon further.\n *\n * Further action after \"settling\" a `CallInvite` will throw an error.\n *\n *  - See the {@link (CallInvite:namespace) | CallInvite namespace} for\n *    enumerations and types used by this class.\n *\n * @public\n */\nexport class CallInvite extends EventEmitter {\n  /**\n   * The current state of the call invite.\n   *\n   * @remarks\n   * See {@link (CallInvite:namespace).State}.\n   */\n  private _state: CallInvite.State;\n  /**\n   * The `Uuid` of this call invite. Used to identify calls between the JS and\n   * native layer so we can associate events and native functionality between\n   * the layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _callSid: string;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from: string;\n  /**\n   * Call `to` parameter.\n   */\n  private _to: string;\n\n  /**\n   * These objects should not be instantiated by consumers of the SDK. All\n   * instances of the `CallInvite` class should be emitted by the SDK.\n   *\n   * @param nativeCallInviteInfo - A dataobject containing the native\n   * information of a call invite.\n   * @param state - Mocking options for testing.\n   *\n   * @internal\n   */\n  constructor(\n    { uuid, callSid, customParameters, from, to }: NativeCallInviteInfo,\n    state: CallInvite.State\n  ) {\n    super();\n\n    this._uuid = uuid;\n    this._callSid = callSid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._to = to;\n\n    this._state = state;\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeCallInvite,\n      this._handleNativeCallInviteEvent\n    );\n  }\n\n  /**\n   * This helper function serves as both a runtime-check error log and a\n   * compile-time type-guard. If the switch-case statement below is non-\n   * exhaustive, then the type passed to this function will _not_ have type\n   * `never`.\n   */\n  private _handleUnexpectedCallInviteEventType(event: never) {\n    throw new TwilioError(\n      `Unknown event type \"${(event as any)?.type}\" reached call invite.`\n    );\n  }\n\n  /**\n   * This intermediate native call invite event handler acts as a \"gate\", only\n   * executing the actual call invite event handler (such as `Accepted`) if\n   * this call invite object matches the `Uuid` of the call invite that had an\n   * event raised.\n   * @param nativeCallInviteEvent - A call invite event directly from the native\n   * layer.\n   */\n  private _handleNativeCallInviteEvent = (\n    nativeCallInviteEvent: NativeCallInviteEvent\n  ) => {\n    if (typeof nativeCallInviteEvent !== 'object') {\n      throw new TwilioError(\n        `Received a \"${typeof nativeCallInviteEvent}\" native call invite event.`\n      );\n    }\n\n    if (nativeCallInviteEvent === null) {\n      throw new TwilioError('Received a null native call invite event.');\n    }\n\n    if (typeof nativeCallInviteEvent.callSid !== 'string') {\n      throw new TwilioError(\n        'Received a native call invite event without a call SID.'\n      );\n    }\n\n    if (nativeCallInviteEvent.callSid !== this._callSid) {\n      return;\n    }\n\n    switch (nativeCallInviteEvent.type) {\n      case Constants.CallInviteEventTypeValueAccepted:\n        return this._handleCallInviteAccepted(nativeCallInviteEvent);\n      case Constants.CallInviteEventTypeValueRejected:\n        return this._handleCallInviteRejected();\n      case Constants.CallInviteEventTypeValueCancelled:\n        return this._handleCallInviteCancelled(nativeCallInviteEvent);\n      case Constants.CallInviteEventTypeValueNotificationTapped:\n        return this._handleCallInviteNotificationTapped();\n      case Constants.CallEventMessageReceived:\n        return this._handleMessageReceivedEvent(nativeCallInviteEvent);\n      default:\n        return this._handleUnexpectedCallInviteEventType(nativeCallInviteEvent);\n    }\n  };\n\n  /**\n   * Handler for the {@link (CallInvite:namespace).Event.MessageReceived} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleMessageReceivedEvent = (\n    nativeCallInviteEvent: NativeCallInviteMessageReceivedEvent\n  ) => {\n    const { callMessage: callMessageInfo } = nativeCallInviteEvent;\n\n    const callMessage = new IncomingCallMessage(callMessageInfo);\n\n    this.emit(CallInvite.Event.MessageReceived, callMessage);\n  };\n\n  /**\n   * Handle when this call invite is accepted.\n   */\n  private _handleCallInviteAccepted = ({\n    callInvite,\n  }: NativeCallInviteAcceptedEvent) => {\n    this._state = CallInvite.State.Accepted;\n\n    const callInfo = {\n      uuid: callInvite.uuid,\n      customParameters: callInvite.customParameters,\n      sid: callInvite.callSid,\n      from: callInvite.from,\n      to: callInvite.to,\n    };\n\n    const call = new Call(callInfo);\n\n    this.emit(CallInvite.Event.Accepted, call);\n  };\n\n  /**\n   * Handle when this call invite is rejected.\n   */\n  private _handleCallInviteRejected = () => {\n    this._state = CallInvite.State.Rejected;\n    this.emit(CallInvite.Event.Rejected);\n  };\n\n  /**\n   * Handle when a call invite is cancelled.\n   */\n  private _handleCallInviteCancelled = (\n    nativeCallInviteCancelledEvent: NativeCallInviteCancelledEvent\n  ) => {\n    this._state = CallInvite.State.Cancelled;\n\n    const error = nativeCallInviteCancelledEvent.error\n      ? constructTwilioError(\n          nativeCallInviteCancelledEvent.error.message,\n          nativeCallInviteCancelledEvent.error.code\n        )\n      : undefined;\n\n    this.emit(CallInvite.Event.Cancelled, error);\n  };\n\n  /**\n   * Handle when a call invite notification is tapped.\n   */\n  private _handleCallInviteNotificationTapped = () => {\n    this.emit(CallInvite.Event.NotificationTapped);\n  };\n\n  /**\n   * Accept a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Accepted}.\n   * @param options - Options to pass to the native layer when accepting the\n   * call.\n   * @returns\n   *  - Resolves when a {@link (Call:class) | Call object} associated with this\n   *    {@link (CallInvite:class)} has been created.\n   */\n  async accept(options: CallInvite.AcceptOptions = {}): Promise<Call> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    const acceptResult = await NativeModule.callInvite_accept(\n      this._uuid,\n      options\n    )\n      .then((callInfo) => {\n        return { type: 'ok', callInfo } as const;\n      })\n      .catch((error) => {\n        const code = error.userInfo.code;\n        const message = error.userInfo.message;\n        return { type: 'err', message, code } as const;\n      });\n\n    if (acceptResult.type === 'err') {\n      throw constructTwilioError(acceptResult.message, acceptResult.code);\n    }\n\n    return new Call(acceptResult.callInfo);\n  }\n\n  /**\n   * Reject a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Rejected}.\n   * @returns\n   *  - Resolves when the {@link (CallInvite:class)} has been rejected.\n   */\n  async reject(): Promise<void> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    await NativeModule.callInvite_reject(this._uuid);\n  }\n\n  /**\n   * Check if a `CallInvite` is valid.\n   *\n   * @returns\n   *  - TODO\n   *\n   * @alpha\n   */\n  isValid(): Promise<boolean> {\n    return NativeModule.callInvite_isValid(this._uuid);\n  }\n\n  /**\n   * Get the call SID associated with this `CallInvite` class.\n   * @returns - A string representing the call SID.\n   */\n  getCallSid(): string {\n    return this._callSid;\n  }\n\n  /**\n   * Get the custom parameters of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the `from` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `from` parameter.\n   */\n  getFrom(): string {\n    return this._from;\n  }\n\n  /**\n   * Get the `state` of the `CallInvite`.\n   * @returns - The `state` of this `CallInvite`.\n   */\n  getState(): CallInvite.State {\n    return this._state;\n  }\n\n  /**\n   * Get the `to` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `to` parameter.\n   */\n  getTo(): string {\n    return this._to;\n  }\n\n  /**\n   * Send a CallMessage.\n   *\n   * @example\n   * To send a user-defined-message\n   * ```typescript\n   * const outgoingCallMessage: OutgoingCallMessage = await callInvite.sendMessage({\n   *   content: { key1: 'This is a messsage from the parent call invite' },\n   *   contentType: 'application/json',\n   *   messageType: 'user-defined-message'\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *   // outgoingCallMessage failed, handle error\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *   // outgoingCallMessage sent\n   * });\n   * ```\n   *\n   * @param message - The call message to send.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the OutgoingCallMessage object.\n   *    - Rejects when the message is unable to be sent.\n   */\n  async sendMessage(message: CallMessage): Promise<OutgoingCallMessage> {\n    const { content, contentType, messageType } = validateCallMessage(message);\n\n    const voiceEventSid = await NativeModule.call_sendMessage(\n      this._uuid,\n      content,\n      contentType,\n      messageType\n    );\n\n    const outgoingCallMessage = new OutgoingCallMessage({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    return outgoingCallMessage;\n  }\n\n  /**\n   * Update the caller name displayed in the iOS system incoming call screen.\n   *\n   * @param newHandle - The new value of the caller's name.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android. Invoke this method\n   * after the incoming call has been reported to CallKit and before the call\n   * has been accepted. For example, perform an async request to your app server\n   * to fetch the full name of the caller and use this method to replace the\n   * default caller name in `from`.\n   *\n   * @returns\n   *  - Resolves when the caller name has been updated.\n   */\n  async updateCallerHandle(newHandle: string): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.callInvite_updateCallerHandle(\n          this._uuid,\n          newHandle\n        );\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n}\n\n/**\n * Provides enumerations and types used by a {@link (CallInvite:class)\n * | CallInvite object}.\n *\n * @remarks\n *  - See also the {@link (CallInvite:class) | CallInvite class}.\n *\n * @public\n */\nexport namespace CallInvite {\n  /**\n   * Options to pass to the native layer when accepting the call.\n   */\n  export interface AcceptOptions {}\n\n  /**\n   * An enumeration of {@link (CallInvite:class)} states.\n   */\n  export enum State {\n    /**\n     * State of a call invite when it has not been acted upon.\n     */\n    Pending = 'pending',\n\n    /**\n     * State of a call invite when it has been accepted.\n     */\n    Accepted = 'accepted',\n\n    /**\n     * State of a call invite when it has been rejected.\n     */\n    Rejected = 'rejected',\n\n    /**\n     * State of a call invite when it has been cancelled.\n     */\n    Cancelled = 'cancelled',\n  }\n\n  /**\n   * Enumeration of all event strings emitted by {@link (CallInvite:class)}\n   * objects.\n   */\n  export enum Event {\n    /**\n     * Event string for the `Accepted` event.\n     * See {@link (CallInvite:interface).(addListener:1)}.\n     */\n    Accepted = 'accepted',\n\n    /**\n     * Event string for the `Rejected` event.\n     * See {@link (CallInvite:interface).(addListener:2)}.\n     */\n    Rejected = 'rejected',\n\n    /**\n     * Event string for the `Cancelled` event.\n     * See {@link (CallInvite:interface).(addListener:3)}.\n     */\n    Cancelled = 'cancelled',\n\n    /**\n     * Event string for the `NotificationTapped` event.\n     * See {@link (CallInvite:interface).(addListener:4)}.\n     */\n    NotificationTapped = 'notificationTapped',\n\n    /**\n     * Event string for the `MessageReceived` event.\n     * See {@link (CallInvite:interface).(addListener:5)}\n     */\n    MessageReceived = 'messageReceived',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (CallInvite:class) | Call invite object.}\n   */\n  export namespace Listener {\n    /**\n     * Accepted event listener. This should be the function signature of any\n     * event listener bound to the {@link (CallInvite:namespace).Event.Accepted}\n     * event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:1)}.\n     */\n    export type Accepted = (call: Call) => void;\n\n    /**\n     * Rejected event listener. This should be the function signature of any\n     * event listener bound to the {@link (CallInvite:namespace).Event.Rejected}\n     * event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:2)}.\n     */\n    export type Rejected = () => void;\n\n    /**\n     * Cancelled event listener. This should be the function signature of any\n     * event listener bound to the\n     * {@link (CallInvite:namespace).Event.Cancelled} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:3)}.\n     */\n    export type Cancelled = (error?: TwilioError) => void;\n\n    /**\n     * Rejected event listener. This should be the function signature of any\n     * event listener bound to the\n     * {@link (CallInvite:namespace).Event.NotificationTapped} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:4)}.\n     */\n    export type NotificationTapped = () => void;\n\n    /**\n     * CallInviteMessage received event listener. This should be the function signature of\n     * any event listener bound to the {@link (CallInvite:namespace).Event.MessageReceived} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:5)}.\n     */\n    export type MessageReceived = (\n      incomingCallMessage: IncomingCallMessage\n    ) => void;\n  }\n}\n"]}
{"version":3,"file":"Call.js","sourceRoot":"","sources":["../src/Call.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE7C,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAUxC,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,EAAe,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAC7E,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AACxE,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AAmTxE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,OAAO,IAAK,SAAQ,YAAY;IACpC;;;;OAIG;IACK,KAAK,CAAO;IACpB;;OAEG;IACK,iBAAiB,CAAmB;IAC5C;;OAEG;IACK,KAAK,CAAU;IACvB;;OAEG;IACK,0BAA0B,CAAQ;IAC1C;;OAEG;IACK,QAAQ,CAAW;IAC3B;;OAEG;IACK,SAAS,CAAW;IAC5B;;OAEG;IACK,IAAI,CAAU;IACtB;;;;;OAKG;IACK,MAAM,CAAa;IAC3B;;OAEG;IACK,GAAG,CAAU;IAErB;;;;;;;OAOG;IACK,mBAAmB,CAGzB;IAEF;;;;;;;;;;;OAWG;IACH,YAAY,EACV,IAAI,EACJ,gBAAgB,EAChB,IAAI,EACJ,GAAG,EACH,KAAK,EACL,EAAE,EACF,OAAO,EACP,QAAQ,EACR,yBAAyB,GACV;QACf,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,gBAAgB,EAAE,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QACxE,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,0BAA0B,GAAG,yBAAyB;YACzD,CAAC,CAAC,IAAI,IAAI,CAAC,yBAAyB,CAAC;YACrC,CAAC,CAAC,SAAS,CAAC;QAEd,IAAI,CAAC,mBAAmB,GAAG;YACzB;;eAEG;YACH,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,qBAAqB;YAC1D,CAAC,SAAS,CAAC,uBAAuB,CAAC,EAAE,IAAI,CAAC,0BAA0B;YACpE,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,IAAI,CAAC,wBAAwB;YAChE,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,uBAAuB;YAC9D,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,IAAI,CAAC,wBAAwB;YAChE,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,mBAAmB;YAEtD;;eAEG;YACH,CAAC,SAAS,CAAC,+BAA+B,CAAC,EACzC,IAAI,CAAC,kCAAkC;YAEzC;;eAEG;YACH,CAAC,SAAS,CAAC,wBAAwB,CAAC,EAAE,IAAI,CAAC,2BAA2B;SACvE,CAAC;QAEF,kBAAkB,CAAC,WAAW,CAC5B,SAAS,CAAC,SAAS,EACnB,IAAI,CAAC,kBAAkB,CACxB,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACK,kBAAkB,GAAG,CAAC,eAAgC,EAAE,EAAE;QAChE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC;QAEjD,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CACb,4DAA4D,IAAI,IAAI,CACrE,CAAC;QACJ,CAAC;QAED,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;YACjC,OAAO,CAAC,eAAe,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC;IAEF;;;;;;;OAOG;IACK,OAAO,CAAC,EACd,IAAI,EACJ,IAAI,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,GAAG,EAAE,EAAE,EAAE,GAClC;QAChB,MAAM,QAAQ,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;YACjC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;QACzB,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,0BAA0B,GAAG,yBAAyB;YACzD,CAAC,CAAC,IAAI,IAAI,CAAC,yBAAyB,CAAC;YACrC,CAAC,CAAC,SAAS,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,qBAAqB,GAAG,CAAC,eAAgC,EAAE,EAAE;QACnE,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,kBAAkB,EAAE,CAAC;YAC1D,MAAM,IAAI,KAAK,CACb,qDAAqD;gBACnD,IAAI,eAAe,CAAC,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC,CAAC;IAEF;;;OAGG;IACK,0BAA0B,GAAG,CAAC,eAAgC,EAAE,EAAE;QACxE,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,uBAAuB,EAAE,CAAC;YAC/D,MAAM,IAAI,KAAK,CACb,0DAA0D;gBACxD,IAAI,eAAe,CAAC,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,KAAK,CAAC;QAChD,MAAM,KAAK,GAAG,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC,CAAC;IAEF;;;OAGG;IACK,wBAAwB,GAAG,CAAC,eAAgC,EAAE,EAAE;QACtE,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,qBAAqB,EAAE,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,wDAAwD;gBACtD,IAAI,eAAe,CAAC,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,IAAI,eAAe,CAAC,KAAK,EAAE,CAAC;YAC1B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,KAAK,CAAC;YAChD,MAAM,KAAK,GAAG,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAC5C,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACrC,CAAC;IACH,CAAC,CAAC;IAEF;;;OAGG;IACK,wBAAwB,GAAG,CAAC,eAAgC,EAAE,EAAE;QACtE,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,qBAAqB,EAAE,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,wDAAwD;gBACtD,IAAI,eAAe,CAAC,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,KAAK,CAAC;QAChD,MAAM,KAAK,GAAG,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEF;;;OAGG;IACK,uBAAuB,GAAG,CAAC,eAAgC,EAAE,EAAE;QACrE,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,oBAAoB,EAAE,CAAC;YAC5D,MAAM,IAAI,KAAK,CACb,uDAAuD;gBACrD,IAAI,eAAe,CAAC,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF;;;OAGG;IACK,mBAAmB,GAAG,CAAC,eAAgC,EAAE,EAAE;QACjE,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,gBAAgB,EAAE,CAAC;YACxD,MAAM,IAAI,KAAK,CACb,mDAAmD;gBACjD,IAAI,eAAe,CAAC,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF;;;;OAIG;IACK,kCAAkC,GAAG,CAC3C,eAAgC,EAChC,EAAE;QACF,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,+BAA+B,EAAE,CAAC;YACvE,MAAM,IAAI,KAAK,CACb,2DAA2D;gBACzD,IAAI,eAAe,CAAC,IAAI,IAAI,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,MAAM,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QAC5E,MAAM,gBAAgB,GACpB,eAAe,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;QAEvD,IAAI,CAAC,IAAI,CACP,IAAI,CAAC,KAAK,CAAC,sBAAsB,EACjC,eAAwC,EACxC,gBAAyC,CAC1C,CAAC;IACJ,CAAC,CAAC;IAEF;;;OAGG;IACK,2BAA2B,GAAG,CAAC,eAAgC,EAAE,EAAE;QACzE,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,CAAC,wBAAwB,EAAE,CAAC;YAChE,MAAM,IAAI,KAAK,CACb,mDAAmD;gBACjD,IAAI,eAAe,CAAC,IAAI,EAAE,CAC7B,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE9B,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,GAAG,eAAe,CAAC;QAEzD,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,CAAC,eAAe,CAAC,CAAC;QAErE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC;IAC7D,CAAC,CAAC;IAEF;;;;;;OAMG;IACH,UAAU;QACR,OAAO,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;OAMG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;;;OAMG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;;;;OAMG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,4BAA4B;QAC1B,OAAO,IAAI,CAAC,0BAA0B,CAAC;IACzC,CAAC;IAED;;;;;;OAMG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;;;;;;OAQG;IACH,QAAQ;QACN,OAAO,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,KAAK,CAAC,IAAI,CAAC,IAAa;QACtB,IAAI,CAAC,SAAS,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,KAAK,CAAC,IAAI,CAAC,IAAa;QACtB,IAAI,CAAC,QAAQ,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,UAAU,CAAC,MAAc;QACvB,OAAO,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACH,KAAK,CAAC,WAAW,CAAC,OAAoB;QACpC,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAE3E,MAAM,aAAa,GAAG,MAAM,YAAY,CAAC,gBAAgB,CACvD,IAAI,CAAC,KAAK,EACV,OAAO,EACP,WAAW,EACX,WAAW,CACZ,CAAC;QAEF,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,CAAC;YAClD,OAAO;YACP,WAAW;YACX,WAAW;YACX,aAAa;SACd,CAAC,CAAC;QAEH,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACH,KAAK,CAAC,YAAY,CAAC,KAAiB,EAAE,KAAiB;QACrD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,oBAAoB,CAC5B,uEAAuE,CACxE,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC/C,MAAM,IAAI,oBAAoB,CAC5B,uEAAuE,CACxE,CAAC;QACJ,CAAC;QAED,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEpC,OAAO,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IAC9E,CAAC;CACF;AAED;;;;;;;;;GASG;AACH,WAAiB,IAAI;IACnB;;OAEG;IACH,IAAY,KAgDX;IAhDD,WAAY,KAAK;QACf;;;WAGG;QACH,gCAAyB,CAAA;QAEzB;;;WAGG;QACH,0CAAmC,CAAA;QAEnC;;;WAGG;QACH,sCAA+B,CAAA;QAE/B;;;WAGG;QACH,oCAA6B,CAAA;QAE7B;;;WAGG;QACH,sCAA+B,CAAA;QAE/B;;;WAGG;QACH,4BAAqB,CAAA;QAErB;;;WAGG;QACH,0DAAmD,CAAA;QAEnD;;;WAGG;QACH,4CAAqC,CAAA;IACvC,CAAC,EAhDW,KAAK,GAAL,UAAK,KAAL,UAAK,QAgDhB;IAED;;OAEG;IACH,IAAY,KAqDX;IArDD,WAAY,KAAK;QACf;;;;;;;;;;WAUG;QACH,gCAA0C,CAAA;QAE1C;;;;WAIG;QACH,kCAA4C,CAAA;QAE5C;;;;;;;;;;WAUG;QACH,sCAAgD,CAAA;QAEhD;;;;;;;;WAQG;QACH,sCAAgD,CAAA;QAEhD;;;;;;WAMG;QACH,4BAAsC,CAAA;IACxC,CAAC,EArDW,KAAK,GAAL,UAAK,KAAL,UAAK,QAqDhB;IAED;;OAEG;IACH,IAAY,cAqBX;IArBD,WAAY,cAAc;QACxB;;WAEG;QACH,wEAAwD,CAAA;QACxD;;WAEG;QACH,4CAA4B,CAAA;QAC5B;;WAEG;QACH,qDAAqC,CAAA;QACrC;;WAEG;QACH,sCAAsB,CAAA;QACtB;;WAEG;QACH,oCAAoB,CAAA;IACtB,CAAC,EArBW,cAAc,GAAd,mBAAc,KAAd,mBAAc,QAqBzB;IAED;;;OAGG;IACH,IAAY,KAyBX;IAzBD,WAAY,KAAK;QACf;;WAEG;QACH,+CAAiB,CAAA;QACjB;;WAEG;QACH,+BAAS,CAAA;QACT;;WAEG;QACH,+BAAS,CAAA;QACT;;WAEG;QACH,mCAAW,CAAA;QACX;;WAEG;QACH,iCAAU,CAAA;QACV;;WAEG;QACH,iCAAU,CAAA;IACZ,CAAC,EAzBW,KAAK,GAAL,UAAK,KAAL,UAAK,QAyBhB;IAED;;OAEG;IACH,IAAY,KA6BX;IA7BD,WAAY,KAAK;QACf;;WAEG;QACH,qCAA8B,CAAA;QAC9B;;WAEG;QACH,qCAA8B,CAAA;QAC9B;;WAEG;QACH,uCAAgC,CAAA;QAChC;;WAEG;QACH,sCAA+B,CAAA;QAC/B;;WAEG;QACH,qCAA8B,CAAA;QAC9B;;WAEG;QACH,iCAA0B,CAAA;QAC1B;;WAEG;QACH,sBAAe,CAAA;IACjB,CAAC,EA7BW,KAAK,GAAL,UAAK,KAAL,UAAK,QA6BhB;AAyGH,CAAC,EAlTgB,IAAI,KAAJ,IAAI,QAkTpB;AAED;;;;;;;;;;;GAWG;AACH,MAAM,iBAAiB,GAAqD;IAC1E,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;IACpD,CAAC,SAAS,CAAC,uBAAuB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;IAC5D,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;IAC1D,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;IAC1D,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;IACtD,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;CACjD,CAAC;AAEF;;;;GAIG;AACH,MAAM,WAAW,GAAG;IAClB,IAAI,CAAC,KAAK,CAAC,WAAW;IACtB,IAAI,CAAC,KAAK,CAAC,GAAG;IACd,IAAI,CAAC,KAAK,CAAC,GAAG;IACd,IAAI,CAAC,KAAK,CAAC,KAAK;IAChB,IAAI,CAAC,KAAK,CAAC,IAAI;IACf,IAAI,CAAC,KAAK,CAAC,IAAI;CAChB,CAAC;AAEF;;;;;GAKG;AACH,MAAM,QAAQ,GAAgD;IAC5D,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,4BAA4B;IAChE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,oBAAoB;IAChD,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,oBAAoB;IAChD,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,sBAAsB;IACpD,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,qBAAqB;IAClD,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,qBAAqB;CACnD,CAAC;AAEF;;;;;GAKG;AACH,MAAM,QAAQ,GAAgD;IAC5D,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,SAAS,CAAC,6BAA6B;IAClE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,4BAA4B;IAChE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,4BAA4B;IAChE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,qBAAqB;IAClD,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,0BAA0B;IAC5D,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,4BAA4B;IAChE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,4BAA4B;CACjE,CAAC","sourcesContent":["/**\n * Copyright © 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport type { RTCStats } from './type/RTCStats';\nimport { NativeModule, NativeEventEmitter } from './common';\nimport { Constants } from './constants';\nimport type {\n  NativeCallEvent,\n  NativeCallEventType,\n  NativeCallInfo,\n  NativeCallFeedbackIssue,\n  NativeCallFeedbackScore,\n} from './type/Call';\nimport type { CustomParameters, Uuid } from './type/common';\nimport type { TwilioError } from './error/TwilioError';\nimport { InvalidArgumentError } from './error/InvalidArgumentError';\nimport { constructTwilioError } from './error/utility';\nimport { CallMessage, validateCallMessage } from './CallMessage/CallMessage';\nimport { IncomingCallMessage } from './CallMessage/IncomingCallMessage';\nimport { OutgoingCallMessage } from './CallMessage/OutgoingCallMessage';\n\n/**\n * Defines strict typings for all events emitted by {@link (Call:class)\n * | Call objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (Call:class) | Call class}.\n * - See also the {@link (Call:namespace) | Call namespace}.\n *\n * @public\n */\nexport declare interface Call {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(connectedEvent: Call.Event.Connected): boolean;\n\n  /** @internal */\n  emit(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    error: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(reconnectingEvent: Call.Event.Reconnecting, error: TwilioError): boolean;\n\n  /** @internal */\n  emit(reconnectedEvent: Call.Event.Reconnected): boolean;\n\n  /** @internal */\n  emit(\n    disconnectedEvent: Call.Event.Disconnected,\n    error?: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(ringingEvent: Call.Event.Ringing): boolean;\n\n  /** @internal */\n  emit(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    currentQualityWarnings: Call.QualityWarning[],\n    previousQualityWarnings: Call.QualityWarning[]\n  ): boolean;\n\n  /** @internal */\n  emit(\n    messageReceivedEvent: Call.Event.MessageReceived,\n    incomingCallMessage: IncomingCallMessage\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Connected event. Raised when the call has successfully connected.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Connected, () => {\n   *   // call has been connected\n   * });\n   * ```\n   *\n   * @param connectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    connectedEvent: Call.Event.Connected,\n    listener: Call.Listener.Connected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:1)}\n   */\n  on(\n    connectedEvent: Call.Event.Connected,\n    listener: Call.Listener.Connected\n  ): this;\n\n  /**\n   * Connect failure event. Raised when the call has failed to connect.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.ConnectFailure, (error) => {\n   *   // call was unable to connect, handle error\n   * });\n   * ```\n   *\n   * @param connectFailureEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    listener: Call.Listener.ConnectFailure\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:2)}\n   */\n  on(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    listener: Call.Listener.ConnectFailure\n  ): this;\n\n  /**\n   * Reconnecting event. Raised when the call is reconnecting.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Reconnecting, (error) => {\n   *   // call is attempting to reconnect, handle error\n   * });\n   * ```\n   *\n   * @param reconnectingEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    reconnectingEvent: Call.Event.Reconnecting,\n    listener: Call.Listener.Reconnecting\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:3)}\n   */\n  on(\n    reconnectingEvent: Call.Event.Reconnecting,\n    listener: Call.Listener.Reconnecting\n  ): this;\n\n  /**\n   * Reconnected event. Raised when the call has recovered and reconnected.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Reconnected, () => {\n   *   // call has reconnected\n   * });\n   * ```\n   *\n   * @param reconnectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    reconnectedEvent: Call.Event.Reconnected,\n    listener: Call.Listener.Reconnected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:4)}\n   */\n  on(\n    reconnectedEvent: Call.Event.Reconnected,\n    listener: Call.Listener.Reconnected\n  ): this;\n\n  /**\n   * Disconnected event. Raised when the call has disconnected.\n   *\n   * @remarks\n   * This event can occur in \"naturally\" disconnected calls and calls\n   * disconnected from issues such as network problems. If the SDK has detected\n   * an issue that has caused the call to disconnect, then the error parameter\n   * will be defined, otherwise it will be undefined.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Disconnected, (error) => {\n   *   // call has disconnected\n   *   // if a natural disconnect occurred, then error is `undefined`\n   *   // if an unnatural disconnect occurred, then error is defined\n   * });\n   * ```\n   *\n   * @param disconnectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    disconnectedEvent: Call.Event.Disconnected,\n    listener: Call.Listener.Disconnected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:5)}\n   */\n  on(\n    disconnectedEvent: Call.Event.Disconnected,\n    listener: Call.Listener.Disconnected\n  ): this;\n\n  /**\n   * Ringing event. Raised when the call has begun to ring.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Ringing, () => {\n   *   // call is ringing\n   * });\n   * ```\n   *\n   * @param ringingEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    ringingEvent: Call.Event.Ringing,\n    listener: Call.Listener.Ringing\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:6)}\n   */\n  on(ringingEvent: Call.Event.Ringing, listener: Call.Listener.Ringing): this;\n\n  /**\n   * Quality warnings changed event. Raised when a call quality warning is set\n   * or unset. All \"ongoing\" call quality warnings are passed to the invoked\n   * listener function.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(\n   *   Call.Event.QualityWarningsChanged,\n   *   (\n   *      currentWarnings: Call.QualityWarning[],\n   *      previousWarnings: Call.QualityWarning[]\n   *   ) => {\n   *     // call quality warnings have changed\n   *   }\n   * );\n   * ```\n   *\n   * @param qualityWarningsChangedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    listener: Call.Listener.QualityWarningsChanged\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:7)}\n   */\n  on(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    listener: Call.Listener.QualityWarningsChanged\n  ): this;\n\n  /**\n   * MessageReceived event. Raised when a {@link IncomingCallMessage} is\n   * received.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.MessageReceived, (message) => {\n   *    // callMessage received\n   * })\n   * ```\n   *\n   * @param messageReceivedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    messageReceivedEvent: Call.Event.MessageReceived,\n    listener: Call.Listener.MessageReceived\n  ): this;\n  /** {@inheritDoc (Call:interface).(addListener:8)} */\n  on(\n    callMessageEvent: Call.Event.MessageReceived,\n    listener: Call.Listener.MessageReceived\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param callEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(callEvent: Call.Event, listener: Call.Listener.Generic): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:9)}\n   */\n  on(callEvent: Call.Event, listener: Call.Listener.Generic): this;\n}\n\n/**\n * Provides access to information about a call, including the call parameters,\n * and exposes functionality for a call such as disconnecting, muting, and\n * holding.\n *\n * @remarks\n * Note that the call information is fetched as soon as possible from the native\n * layer, but there is no guarantee that all information is immediately\n * available. Methods such as `Call.getFrom()` or `Call.getTo()` may return\n * `undefined`.\n *\n * As call events are received from the native layer, call information will\n * propagate from the native layer to the JS layer and become available.\n * Therefore, it is good practice to read information from the call after an\n * event occurs, or as events occur.\n *\n *  - See the {@link (Call:namespace).Event} enum for events emitted by `Call`\n *    objects.\n *  - See the {@link (Call:interface) | Call interface} for overloaded event\n *    listening methods.\n *  - See the {@link (Call:namespace) | Call namespace} for types and\n *    enumerations used by this class.\n *\n * @public\n */\nexport class Call extends EventEmitter {\n  /**\n   * The `Uuid` of this call. Used to identify calls between the JS and native\n   * layer so we can associate events and native functionality between the\n   * layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from?: string;\n  /**\n   * Initial `connected` timestamp. Milliseconds since epoch.\n   */\n  private _initialConnectedTimestamp?: Date;\n  /**\n   * A boolean representing if the call is currently muted.\n   */\n  private _isMuted?: boolean;\n  /**\n   * A boolean representing if the call is currently on hold.\n   */\n  private _isOnHold?: boolean;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _sid?: string;\n  /**\n   * The current state of the call.\n   *\n   * @remarks\n   * See {@link (Call:namespace).State}.\n   */\n  private _state: Call.State;\n  /**\n   * Call `to` parameter.\n   */\n  private _to?: string;\n\n  /**\n   * Handlers for native call events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (Call:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeCallEventType,\n    (callEvent: NativeCallEvent) => void\n  >;\n\n  /**\n   * Constructor for the {@link (Call:class) | Call class}. This should not be\n   * invoked by third-party code. All instances of the\n   * {@link (Call:class) | Call class} should be made by the SDK and emitted by\n   * {@link (Voice:class) | Voice objects}.\n   *\n   * @param nativeCallInfo - An object containing all of the data from the\n   * native layer necessary to fully describe a call, as well as invoke native\n   * functionality for the call.\n   *\n   * @internal\n   */\n  constructor({\n    uuid,\n    customParameters,\n    from,\n    sid,\n    state,\n    to,\n    isMuted,\n    isOnHold,\n    initialConnectedTimestamp,\n  }: NativeCallInfo) {\n    super();\n\n    this._uuid = uuid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._sid = sid;\n    this._state = typeof state === 'string' ? state : Call.State.Connecting;\n    this._to = to;\n    this._isMuted = isMuted;\n    this._isOnHold = isOnHold;\n    this._initialConnectedTimestamp = initialConnectedTimestamp\n      ? new Date(initialConnectedTimestamp)\n      : undefined;\n\n    this._nativeEventHandler = {\n      /**\n       * Call State\n       */\n      [Constants.CallEventConnected]: this._handleConnectedEvent,\n      [Constants.CallEventConnectFailure]: this._handleConnectFailureEvent,\n      [Constants.CallEventDisconnected]: this._handleDisconnectedEvent,\n      [Constants.CallEventReconnected]: this._handleReconnectedEvent,\n      [Constants.CallEventReconnecting]: this._handleReconnectingEvent,\n      [Constants.CallEventRinging]: this._handleRingingEvent,\n\n      /**\n       * Call Quality\n       */\n      [Constants.CallEventQualityWarningsChanged]:\n        this._handleQualityWarningsChangedEvent,\n\n      /**\n       * Call Message\n       */\n      [Constants.CallEventMessageReceived]: this._handleMessageReceivedEvent,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeCall,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * This intermediate native call event handler acts as a \"gate\", only\n   * executing the actual call event handler (such as `Connected`) if this call\n   * object matches the `Uuid` of the call that had an event raised.\n   * @param nativeCallEvent - A call event directly from the native layer.\n   */\n  private _handleNativeEvent = (nativeCallEvent: NativeCallEvent) => {\n    const { type, call: callInfo } = nativeCallEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown call event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    if (callInfo.uuid === this._uuid) {\n      handler(nativeCallEvent);\n    }\n  };\n\n  /**\n   * Helper function to update the state of the call when a call event occurs\n   * that necessitates an update, i.e. upon a\n   * {@link (Call:namespace).Event.Connected | Connected event} we want to\n   * update the state of the call to also reflect the\n   * {@link (Call:namespace).State.Connected | Connected state}.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _update({\n    type,\n    call: { from, initialConnectedTimestamp, sid, to },\n  }: NativeCallEvent) {\n    const newState = eventTypeStateMap[type];\n    if (typeof newState === 'string') {\n      this._state = newState;\n    }\n    this._from = from;\n    this._initialConnectedTimestamp = initialConnectedTimestamp\n      ? new Date(initialConnectedTimestamp)\n      : undefined;\n    this._sid = sid;\n    this._to = to;\n  }\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Connected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleConnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventConnected) {\n      throw new Error(\n        'Incorrect \"call#connected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Connected);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.ConnectFailure} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleConnectFailureEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventConnectFailure) {\n      throw new Error(\n        'Incorrect \"call#connectFailure\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { message, code } = nativeCallEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(Call.Event.ConnectFailure, error);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Disconnected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleDisconnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventDisconnected) {\n      throw new Error(\n        'Incorrect \"call#disconnected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    if (nativeCallEvent.error) {\n      const { message, code } = nativeCallEvent.error;\n      const error = constructTwilioError(message, code);\n      this.emit(Call.Event.Disconnected, error);\n    } else {\n      this.emit(Call.Event.Disconnected);\n    }\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Reconnecting} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleReconnectingEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventReconnecting) {\n      throw new Error(\n        'Incorrect \"call#reconnecting\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { message, code } = nativeCallEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(Call.Event.Reconnecting, error);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Reconnected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleReconnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventReconnected) {\n      throw new Error(\n        'Incorrect \"call#reconnected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Reconnected);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Ringing} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleRingingEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventRinging) {\n      throw new Error(\n        'Incorrect \"call#ringing\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Ringing);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.QualityWarningsChanged}\n   * event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleQualityWarningsChangedEvent = (\n    nativeCallEvent: NativeCallEvent\n  ) => {\n    if (nativeCallEvent.type !== Constants.CallEventQualityWarningsChanged) {\n      throw new Error(\n        'Incorrect \"call#qualityWarnings\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const currentWarnings = nativeCallEvent[Constants.CallEventCurrentWarnings];\n    const previousWarnings =\n      nativeCallEvent[Constants.CallEventPreviousWarnings];\n\n    this.emit(\n      Call.Event.QualityWarningsChanged,\n      currentWarnings as Call.QualityWarning[],\n      previousWarnings as Call.QualityWarning[]\n    );\n  };\n\n  /**\n   * Handler for the {@link (Call:namespace).Event.MessageReceived} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleMessageReceivedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventMessageReceived) {\n      throw new Error(\n        'Incorrect \"call#Received\" handler called for type' +\n          `\"${nativeCallEvent.type}`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { callMessage: callMessageInfo } = nativeCallEvent;\n\n    const incomingCallMessage = new IncomingCallMessage(callMessageInfo);\n\n    this.emit(Call.Event.MessageReceived, incomingCallMessage);\n  };\n\n  /**\n   * Disconnect this side of the call.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the call has disconnected.\n   *    - Rejects if the native layer cannot disconnect the call.\n   */\n  disconnect(): Promise<void> {\n    return NativeModule.call_disconnect(this._uuid);\n  }\n\n  /**\n   * Get the mute status of this side of the call.\n   * @returns\n   *  - A boolean representing the muted status of the call.\n   *  - `undefined` if the call state has not yet been received from the native\n   *    layer.\n   */\n  isMuted(): boolean | undefined {\n    return this._isMuted;\n  }\n\n  /**\n   * Get the hold status of this side of the call.\n   * @returns\n   *  - A boolean representing the hold status of the call.\n   *  - `undefined` if the call state has not yet been received from the native\n   *    layer.\n   */\n  isOnHold(): boolean | undefined {\n    return this._isOnHold;\n  }\n\n  /**\n   * Return a `Record` of custom parameters given to this call.\n   * @returns\n   *   - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the value of the `from` parameter given to this call.\n   * @returns\n   *  - A `String` representing the `from` parameter.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getFrom(): string | undefined {\n    return this._from;\n  }\n\n  /**\n   * Get the timestamp (milliseconds since epoch) of the call connected event.\n   * @returns\n   *  - A `number` representing the timestamp.\n   *  - `undefined` if the call has not yet connected.\n   */\n  getInitialConnectedTimestamp(): Date | undefined {\n    return this._initialConnectedTimestamp;\n  }\n\n  /**\n   * Get the call `SID`.\n   * @returns\n   *  - A `String` representing the `SID` of the call.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getSid(): string | undefined {\n    return this._sid;\n  }\n\n  /**\n   * Get the state of the call object, such as {@link (Call:namespace).State.Connected} or\n   * {@link (Call:namespace).State.Disconnected}.\n   * @returns\n   *  - A {@link (Call:namespace).State}.\n   */\n  getState(): Call.State {\n    return this._state;\n  }\n\n  /**\n   * Gets the `PeerConnection` `WebRTC` stats for the ongoing call.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with a {@link RTCStats.StatsReport} object representing the\n   *      `WebRTC` `PeerConnection` stats of a call.\n   *    - Rejects when a {@link RTCStats.StatsReport} cannot be generated for a\n   *      call.\n   */\n  getStats(): Promise<RTCStats.StatsReport> {\n    return NativeModule.call_getStats(this._uuid);\n  }\n\n  /**\n   * Get the value of the `to` parameter given to this call.\n   * @returns\n   *  - A `String` representing the `to` parameter.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getTo(): string | undefined {\n    return this._to;\n  }\n\n  /**\n   * Put this end of the call on hold or not on hold.\n   *\n   * @example\n   * To put a call on hold\n   * ```typescript\n   * call.hold(true);\n   * ```\n   * @example\n   * To take a call off hold\n   * ```typescript\n   * call.hold(false);\n   * ```\n   *\n   * @param hold - A `boolean` representing whether or not to put this end of\n   *  the call on hold.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the hold status when the call is put on hold or not on\n   *      hold.\n   *    - Rejects when the call is not able to be put on hold or not on hold.\n   */\n  async hold(hold: boolean): Promise<boolean> {\n    this._isOnHold = await NativeModule.call_hold(this._uuid, hold);\n    return this._isOnHold;\n  }\n\n  /**\n   * Mute or unmute this end of the call.\n   *\n   * @example\n   * To mute a call\n   * ```typescript\n   * call.mute(true);\n   * ```\n   *\n   * @example\n   * To unmute a call\n   * ```typescript\n   * call.mute(false);\n   * ```\n   *\n   * @param mute - A `boolean` representing whether or not to mute this end of\n   *  the call.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the muted status of the call when the call is muted or\n   *      unmuted.\n   *    - Rejects when the call is not able to be muted or unmuted.\n   */\n  async mute(mute: boolean): Promise<boolean> {\n    this._isMuted = await NativeModule.call_mute(this._uuid, mute);\n    return this._isMuted;\n  }\n\n  /**\n   * Send DTMF digits.\n   *\n   * @example\n   * To send the `0` dialtone:\n   * ```typescript\n   * call.sendDigits('0');\n   * ```\n   *\n   * @example\n   * To send the `0` and then `1` dialtone:\n   * ```typescript\n   * call.sendDigits('01');\n   * ```\n   *\n   * @param digits - A sequence of DTMF digits in a string.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the DTMF digits have been sent.\n   *    - Rejects when DTMF tones are not able to be sent.\n   */\n  sendDigits(digits: string): Promise<void> {\n    return NativeModule.call_sendDigits(this._uuid, digits);\n  }\n\n  /**\n   * Send a CallMessage.\n   *\n   * @example\n   * To send a user-defined-message\n   * ```typescript\n   * const outgoingCallMessage: OutgoingCallMessage = await call.sendMessage({\n   *   content: { key1: 'This is a messsage from the parent call' },\n   *   contentType: 'application/json',\n   *   messageType: 'user-defined-message'\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *   // outgoingCallMessage failed, handle error\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *   // outgoingCallMessage sent\n   * });\n   * ```\n   *\n   * @param message - The call message to send.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the OutgoingCallMessage object.\n   *    - Rejects when the message is unable to be sent.\n   */\n  async sendMessage(message: CallMessage): Promise<OutgoingCallMessage> {\n    const { content, contentType, messageType } = validateCallMessage(message);\n\n    const voiceEventSid = await NativeModule.call_sendMessage(\n      this._uuid,\n      content,\n      contentType,\n      messageType\n    );\n\n    const outgoingCallMessage = new OutgoingCallMessage({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    return outgoingCallMessage;\n  }\n\n  /**\n   * Post feedback about a call.\n   *\n   * @example\n   * To report that a call had very significant audio latency:\n   * ```typescript\n   * call.postFeedback(Call.Score.Five, Call.Issue.AudioLatency);\n   * ```\n   *\n   * @param score - A score representing the serverity of the issue being\n   * reported.\n   * @param issue - The issue being reported.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the feedback has been posted.\n   *    - Rejects when the feedback is unable to be sent.\n   */\n  async postFeedback(score: Call.Score, issue: Call.Issue): Promise<void> {\n    if (!validScores.includes(score)) {\n      throw new InvalidArgumentError(\n        '\"score\" parameter invalid. Must be a member of the `Call.Score` enum.'\n      );\n    }\n\n    if (!Object.values(Call.Issue).includes(issue)) {\n      throw new InvalidArgumentError(\n        '\"issue\" parameter invalid. Must be a member of the `Call.Issue` enum.'\n      );\n    }\n\n    const nativeScore = scoreMap[score];\n    const nativeIssue = issueMap[issue];\n\n    return NativeModule.call_postFeedback(this._uuid, nativeScore, nativeIssue);\n  }\n}\n\n/**\n * Namespace for enumerations and types used by\n * {@link (Call:class) | Call objects}.\n *\n * @remarks\n *  - See also the {@link (Call:class) | Call class}.\n *  - See also the {@link (Call:interface) | Call interface}.\n *\n * @public\n */\nexport namespace Call {\n  /**\n   * Enumeration of all event strings emitted by {@link (Call:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Event string for the `Connected` event.\n     * See {@link (Call:interface).(addListener:1)}.\n     */\n    'Connected' = 'connected',\n\n    /**\n     * Event string for the `ConnectedFailure` event.\n     * See {@link (Call:interface).(addListener:2)}.\n     */\n    'ConnectFailure' = 'connectFailure',\n\n    /**\n     * Event string for the `Reconnecting` event.\n     * See {@link (Call:interface).(addListener:3)}.\n     */\n    'Reconnecting' = 'reconnecting',\n\n    /**\n     * Event string for the `Reconnected` event.\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    'Reconnected' = 'reconnected',\n\n    /**\n     * Event string for the `Disconnected` event.\n     * See {@link (Call:interface).(addListener:5)}.\n     */\n    'Disconnected' = 'disconnected',\n\n    /**\n     * Event string for the `Ringing` event.\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    'Ringing' = 'ringing',\n\n    /**\n     * Event string for the `QualityWarningsChanged` event.\n     * See {@link (Call:interface).(addListener:7)}.\n     */\n    'QualityWarningsChanged' = 'qualityWarningsChanged',\n\n    /**\n     * Event string for the `MessageReceived` event.\n     * See {@link (Call:interface).(addListener:8)}\n     */\n    'MessageReceived' = 'messageReceived',\n  }\n\n  /**\n   * An enumeration of all possible {@link (Call:class) | Call object} states.\n   */\n  export enum State {\n    /**\n     * Call `Connected` state.\n     *\n     * Occurs when the `Connected` and `Reconnected` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:1)}.\n     *\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    'Connected' = Constants.CallStateConnected,\n\n    /**\n     * Call `Connecting` state.\n     *\n     * The default state of an outgoing call.\n     */\n    'Connecting' = Constants.CallStateConnecting,\n\n    /**\n     * Call `Disconnected` state.\n     *\n     * Occurs when the `Disconnected` or `ConnectFailure` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:5)}.\n     *\n     * See {@link (Call:interface).(addListener:2)}.\n     */\n    'Disconnected' = Constants.CallStateDisconnected,\n\n    /**\n     * Call `Reconnecting` state.\n     *\n     * Occurs when the `Reconnecting` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:3)}.\n     */\n    'Reconnecting' = Constants.CallStateReconnecting,\n\n    /**\n     * Call `Ringing` state. Occurs when the `Ringing` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    'Ringing' = Constants.CallStateRinging,\n  }\n\n  /**\n   * An enumeration of all call quality-warning types.\n   */\n  export enum QualityWarning {\n    /**\n     * Raised when the call detects constant audio input, such as silence.\n     */\n    'ConstantAudioInputLevel' = 'constant-audio-input-level',\n    /**\n     * Raised when the network encounters high jitter.\n     */\n    'HighJitter' = 'high-jitter',\n    /**\n     * Raised when the network encounters high packet loss.\n     */\n    'HighPacketLoss' = 'high-packet-loss',\n    /**\n     * Raised when the network encounters high packet round-trip-time.\n     */\n    'HighRtt' = 'high-rtt',\n    /**\n     * Raised when the call detects a low mean-opinion-score or MOS.\n     */\n    'LowMos' = 'low-mos',\n  }\n\n  /**\n   * An enumeration of all scores that could be used to rate the experience of\n   * a call or issues encountered during the call.\n   */\n  export enum Score {\n    /**\n     * An issue was not encountered or there is no desire to report said issue.\n     */\n    'NotReported' = 0,\n    /**\n     * An issue had severity approximately 1/5.\n     */\n    'One' = 1,\n    /**\n     * An issue had severity approximately 2/5.\n     */\n    'Two' = 2,\n    /**\n     * An issue had severity approximately 3/5.\n     */\n    'Three' = 3,\n    /**\n     * An issue had severity approximately 4/5.\n     */\n    'Four' = 4,\n    /**\n     * An issue had severity approximately 5/5.\n     */\n    'Five' = 5,\n  }\n\n  /**\n   * An enumeration of call issues that can be reported.\n   */\n  export enum Issue {\n    /**\n     * No issue is reported.\n     */\n    'NotReported' = 'not-reported',\n    /**\n     * The call was dropped unexpectedly.\n     */\n    'DroppedCall' = 'dropped-call',\n    /**\n     * The call encountered significant audio latency.\n     */\n    'AudioLatency' = 'audio-latency',\n    /**\n     * One party of the call could not hear the other callee.\n     */\n    'OneWayAudio' = 'one-way-audio',\n    /**\n     * Call audio was choppy.\n     */\n    'ChoppyAudio' = 'choppy-audio',\n    /**\n     * Call audio had significant noise.\n     */\n    'NoisyCall' = 'noisy-call',\n    /**\n     * Call audio had significant echo.\n     */\n    'Echo' = 'echo',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (Call:class) | Call object.}\n   */\n  export namespace Listener {\n    /**\n     * Connected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Connected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:1)}.\n     */\n    export type Connected = () => void;\n\n    /**\n     * Connect failure event listener. This should be the function signature of\n     * any event listener bound to the\n     * {@link (Call:namespace).Event.ConnectFailure} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:2)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type ConnectFailure = (error: TwilioError) => void;\n\n    /**\n     * Reconnecting event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Reconnecting}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:3)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Reconnecting = (error: TwilioError) => void;\n\n    /**\n     * Reconnected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Reconnected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    export type Reconnected = () => void;\n\n    /**\n     * Disconnected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Disconnected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:5)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Disconnected = (error?: TwilioError) => void;\n\n    /**\n     * Ringing event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Ringing} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    export type Ringing = () => void;\n\n    /**\n     * Quality warnings changed event listener. This should be the function\n     * signature of any event listener bound to the\n     * {@link (Call:namespace).Event.QualityWarningsChanged} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:7)}.\n     */\n    export type QualityWarningsChanged = (\n      currentQualityWarnings: Call.QualityWarning[],\n      previousQualityWarnings: Call.QualityWarning[]\n    ) => void;\n\n    /**\n     * CallMessage received event listener. This should be the function signature of\n     * any event listener bound to the {@link (Call:namespace).Event.MessageReceived} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:8)}.\n     */\n    export type MessageReceived = (\n      incomingCallMessage: IncomingCallMessage\n    ) => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any call event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:9)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n\n/**\n * Mapping of {@link (Call:namespace).Event | Call events} to\n * {@link (Call:namespace).State | Call states}.\n *\n * @remarks\n * Note that this mapping is not a 1:1 bijection. Not every event coming from\n * the native layer has a relevant state, and some events share a state.\n * Therefore, this `Record` needs to be marked as `Partial` and\n * undefined-checking logic is needed when using this mapping.\n *\n * @internal\n */\nconst eventTypeStateMap: Partial<Record<NativeCallEventType, Call.State>> = {\n  [Constants.CallEventConnected]: Call.State.Connected,\n  [Constants.CallEventConnectFailure]: Call.State.Disconnected,\n  [Constants.CallEventDisconnected]: Call.State.Disconnected,\n  [Constants.CallEventReconnecting]: Call.State.Reconnecting,\n  [Constants.CallEventReconnected]: Call.State.Connected,\n  [Constants.CallEventRinging]: Call.State.Ringing,\n};\n\n/**\n * Array of valid call scores.\n *\n * @internal\n */\nconst validScores = [\n  Call.Score.NotReported,\n  Call.Score.One,\n  Call.Score.Two,\n  Call.Score.Three,\n  Call.Score.Four,\n  Call.Score.Five,\n];\n\n/**\n * Mapping of the {@link (Call:namespace).Score | Call score} enum to\n * cross-platform common constants.\n *\n * @internal\n */\nconst scoreMap: Record<Call.Score, NativeCallFeedbackScore> = {\n  [Call.Score.NotReported]: Constants.CallFeedbackScoreNotReported,\n  [Call.Score.One]: Constants.CallFeedbackScoreOne,\n  [Call.Score.Two]: Constants.CallFeedbackScoreTwo,\n  [Call.Score.Three]: Constants.CallFeedbackScoreThree,\n  [Call.Score.Four]: Constants.CallFeedbackScoreFour,\n  [Call.Score.Five]: Constants.CallFeedbackScoreFive,\n};\n\n/**\n * Mapping of the {@link (Call:namespace).Issue | Call issue} enum to\n * cross-platform common constants.\n *\n * @internal\n */\nconst issueMap: Record<Call.Issue, NativeCallFeedbackIssue> = {\n  [Call.Issue.AudioLatency]: Constants.CallFeedbackIssueAudioLatency,\n  [Call.Issue.ChoppyAudio]: Constants.CallFeedbackIssueChoppyAudio,\n  [Call.Issue.DroppedCall]: Constants.CallFeedbackIssueDroppedCall,\n  [Call.Issue.Echo]: Constants.CallFeedbackIssueEcho,\n  [Call.Issue.NoisyCall]: Constants.CallFeedbackIssueNoisyCall,\n  [Call.Issue.NotReported]: Constants.CallFeedbackIssueNotReported,\n  [Call.Issue.OneWayAudio]: Constants.CallFeedbackIssueOneWayAudio,\n};\n"]}
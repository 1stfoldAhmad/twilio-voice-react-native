{"version":3,"file":"NativeModule.js","sourceRoot":"","sources":["../../src/type/NativeModule.ts"],"names":[],"mappings":"","sourcesContent":["import type { NativeModulesStatic } from 'react-native';\nimport type { CallInvite } from '../CallInvite';\nimport type { NativeAudioDevicesInfo } from './AudioDevice';\nimport type {\n  NativeCallInfo,\n  NativeCallFeedbackIssue,\n  NativeCallFeedbackScore,\n} from './Call';\nimport type { NativeCallInviteInfo } from './CallInvite';\nimport type { Uuid } from './common';\nimport type { RTCStats } from './RTCStats';\n\nexport interface TwilioVoiceReactNative extends NativeModulesStatic {\n  /**\n   * Native types.\n   *\n   * The following event related functions are required by the React Native\n   * bindings.\n   */\n  addListener: (eventType: string) => void;\n  removeListeners: (count: number) => void;\n\n  /**\n   * Call bindings.\n   */\n  call_disconnect(callUuid: Uuid): Promise<void>;\n  call_getStats(callUuid: Uuid): Promise<RTCStats.StatsReport>;\n  call_hold(callUuid: Uuid, hold: boolean): Promise<boolean>;\n  call_isOnHold(callUuid: Uuid): Promise<boolean>;\n  call_isMuted(callUuid: Uuid): Promise<boolean>;\n  call_mute(callUuid: Uuid, mute: boolean): Promise<boolean>;\n  call_postFeedback(\n    callUuid: Uuid,\n    score: NativeCallFeedbackScore,\n    issue: NativeCallFeedbackIssue\n  ): Promise<void>;\n  call_sendDigits(callUuid: Uuid, digits: string): Promise<void>;\n  call_sendMessage(\n    callUuid: Uuid,\n    content: string,\n    contentType: string,\n    messageType: string\n  ): Promise<string>;\n\n  /**\n   * Call Invite bindings.\n   */\n  callInvite_accept(\n    callInviteUuid: Uuid,\n    acceptOptions: CallInvite.AcceptOptions\n  ): Promise<NativeCallInfo>;\n  callInvite_isValid(callInviteUuid: Uuid): Promise<boolean>;\n  callInvite_reject(callInviteUuid: Uuid): Promise<void>;\n  callInvite_updateCallerHandle(\n    callInviteUuid: Uuid,\n    handle: string\n  ): Promise<void>;\n\n  /**\n   * Voice bindings.\n   */\n  voice_connect_android(\n    token: string,\n    twimlParams: Record<string, any>,\n    notificationDisplayName: string | undefined\n  ): Promise<NativeCallInfo>;\n  voice_connect_ios(\n    token: string,\n    twimlParams: Record<string, any>,\n    contactHandle: string\n  ): Promise<NativeCallInfo>;\n  voice_initializePushRegistry(): Promise<void>;\n  voice_setCallKitConfiguration(\n    configuration: Record<string, any>\n  ): Promise<void>;\n  voice_setIncomingCallContactHandleTemplate(template?: string): Promise<void>;\n  voice_getAudioDevices(): Promise<NativeAudioDevicesInfo>;\n  voice_getCalls(): Promise<NativeCallInfo[]>;\n  voice_getCallInvites(): Promise<NativeCallInviteInfo[]>;\n  voice_getDeviceToken(): Promise<string>;\n  voice_getVersion(): Promise<string>;\n  voice_handleEvent(remoteMessage: Record<string, string>): Promise<boolean>;\n  voice_register(accessToken: string): Promise<void>;\n  voice_selectAudioDevice(audioDeviceUuid: Uuid): Promise<void>;\n  voice_showNativeAvRoutePicker(): Promise<void>;\n  voice_unregister(accessToken: string): Promise<void>;\n\n  /**\n   * System/permissions related bindings.\n   */\n  system_isFullScreenNotificationEnabled(): Promise<boolean>;\n  system_requestFullScreenNotificationPermission(): Promise<void>;\n}\n"]}